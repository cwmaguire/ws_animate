┏━━━━━━━━━━━━━━━━┓
┃   2024-05-27   ┃
┗━━━━━━━━━━━━━━━━┛

I think I'd like to put an animation chooser on the rendering window: when
you add an animator you get a button for that animator to open a settings
window for it. Every time you open a settings window, that window will subscribe
to controls for that animator.

Hmm, I should probably either subscribe to settings as well, or send out
settings changes as controls. Seems a little wasteful to clear and re-draw all
controls when only a setting has changed, but I think it's good to start with
the assumption that I have unlimited CPU, RAM and NET and never worry about
optimization because this is a toy.

I could just have buttons for all the animators, until I have so many that I
can't reasonably contain them on the page.

My original goal was to play with animations, not become a UI designer.
I find it fun to code up an animation, then take all of the numbers and settings
that go into the animation and attach them to controls so I can play with them
in real time.

I'm inspired by Brett Victor's talk "Inventing on Principle"
https://www.youtube.com/watch?v=EGqwXt90ZqA

┏━━━━━━━━━━━━━━━━┓
┃   2024-05-25   ┃
┗━━━━━━━━━━━━━━━━┛

Ah, turns out if JavaScript opens a new window, the new window has a reference
to the opener.

Websocket is closing "clean" with code 1000 - normal.

┏━━━━━━━━━━━━━━━━┓
┃   2024-05-25   ┃
┗━━━━━━━━━━━━━━━━┛

If I'm going to have a background animation, like a changing gradient or
something, then I'll need to set the Z-index of each draw command. I could
the draw commands on the server or in the web page. I think I'd prefer
to do as much logic in Erlang as possible. I'm only using JavaScript at
all because it's pretty easy to create a canvas and issue drawing commands,
but I want all the drawing logic to be in Erlang, because JavaScript is
silly. (And I work with Erlang regularly.)

┏━━━━━━━━━━━━━━━━┓
┃   2024-05-21   ┃
┗━━━━━━━━━━━━━━━━┛

Should I have a seprate buffer process for draw commands, or just
use the channel? For now I think I'll just use the channel. I don't think
there will be enough draw commands to overwhelm the channel so it can't
respond to commands without slowing down the animation.

The channel has to send the "clear" draw call or else the individual
animation processes will be clearing each other.

If no socket is subscribed to a buffered message then it is just thrown
away.

┏━━━━━━━━━━━━━━━━┓
┃   2024-05-20   ┃
┗━━━━━━━━━━━━━━━━┛

The websocket handler is going to be a shell where the web page can
start animation servers and then register for events from those servers

Each web page can have multiple animation servers running in parallel

The websocket handler will handle all communication between animation
servers and the socket

So, if I'm going to have multiple websocket connections all working
together, I'll need a separate server.

Hmm, and if any connection to the server dies, I don't want the server
to die: i.e. if 1 of 3 websockets closes, the server shouldn't shut down
and disconnect the other two.

I think the websockets can monitor the Erlang server and then disconnect
if it dies.

I'm not going to bother with any kind of security.

So, if I'm going to connect a 2nd websocket to an existing Erlang socket
handler, I'll need to either lookup what handlers exist, or specify an
ID that I know in advance

I could have a handler registry; but then how would a JS client know
which one to pick. I think the first JS client should specify an ID
and then any other clients can use that same ID; kind of a channel
identifier

The socket server could monitor the websocket connections and if they all
die then the server dies.

Okay, I have a channel registry and channels. Now I need to add animators
to the channels. Animators will be hard-coded, but will have parameters
that can be set so they can be played with from the web page.

I might need to have the animators expose paramters with their types so that
the control page can render them as UI controls.

If I can have multiple animators per channel, how do I control which animator
gets a parameter set?
I think each animator will need a local name.

Would a JS client ever need to join multiple channels? I don't think so.
Should joining a channel automatically leave any previous channel?
No, let's make it so you have to explicitly leave a channel.
